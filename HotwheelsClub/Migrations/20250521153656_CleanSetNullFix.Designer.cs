// <auto-generated />
using System;
using HotwheelsClub.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace HotwheelsClub.Migrations
{
    [DbContext(typeof(HotwheelsClubDBContext))]
    [Migration("20250521153656_CleanSetNullFix")]
    partial class CleanSetNullFix
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("HotwheelsClub.Models.ClubModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int?>("ProprietorId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProprietorId");

                    b.ToTable("Club");
                });

            modelBuilder.Entity("HotwheelsClub.Models.HotwheelsModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Color")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Model")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<int>("ProprietorId")
                        .HasColumnType("int");

                    b.Property<int>("Year")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProprietorId");

                    b.ToTable("Hotwheels", (string)null);
                });

            modelBuilder.Entity("HotwheelsClub.Models.UserModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("ClubId")
                        .HasColumnType("int");

                    b.Property<bool>("MonthlyFees")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id");

                    b.HasIndex("ClubId");

                    b.ToTable("User");
                });

            modelBuilder.Entity("HotwheelsClub.Models.ClubModel", b =>
                {
                    b.HasOne("HotwheelsClub.Models.UserModel", "Proprietor")
                        .WithMany()
                        .HasForeignKey("ProprietorId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Proprietor");
                });

            modelBuilder.Entity("HotwheelsClub.Models.HotwheelsModel", b =>
                {
                    b.HasOne("HotwheelsClub.Models.UserModel", "Proprietor")
                        .WithMany("hotwheels")
                        .HasForeignKey("ProprietorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Proprietor");
                });

            modelBuilder.Entity("HotwheelsClub.Models.UserModel", b =>
                {
                    b.HasOne("HotwheelsClub.Models.ClubModel", "Club")
                        .WithMany("Members")
                        .HasForeignKey("ClubId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Club");
                });

            modelBuilder.Entity("HotwheelsClub.Models.ClubModel", b =>
                {
                    b.Navigation("Members");
                });

            modelBuilder.Entity("HotwheelsClub.Models.UserModel", b =>
                {
                    b.Navigation("hotwheels");
                });
#pragma warning restore 612, 618
        }
    }
}
